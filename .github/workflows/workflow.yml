name: Run Python script  # 工作流程的名称，将显示在GitHub Actions的UI中

on: [push]  # 触发工作流程的事件，这里设置为在代码push到仓库时触发

jobs:  # 工作流程中的所有作业列表
  build:  # 作业的ID，用于在工作流程文件中引用
    runs-on: windows-latest  # 指定作业运行的虚拟机环境，这里使用最新版的Ubuntu

    steps:  # 作业中的步骤列表
      - uses: actions/checkout@v2  # 使用checkout动作来检出仓库，@v2指定使用的版本
        # 这一步将克隆你的仓库到虚拟机中，以便进行后续操作

      - name: Set up Python  # 步骤的名称，将显示在GitHub Actions的UI中
        uses: actions/setup-python@v2  # 使用setup-python动作来配置Python环境
        with:  # 配置动作的参数
          python-version: '3.x'  # 指定要使用的Python版本，这里使用3.x系列中的最新版本

      - name: Run the script  # 运行Python脚本的步骤
        run: python hello.py  # 运行Python脚本，假设脚本名为hello.py
        # 这一步将执行你的Python脚本，确保脚本文件名正确

      - name: Install PyInstaller  # 安装PyInstaller的步骤
        run: |  # 运行一系列命令
          pip install pyinstaller  # 使用pip安装PyInstaller，这是用来构建.exe文件的工具

      - name: Build EXE  # 构建可执行文件的步骤
        run: |
          pyinstaller --onefile hello.py  # 运行PyInstaller命令来构建.exe文件
          # --onefile参数告诉PyInstaller将所有依赖打包成一个单一的.exe文件
          # your_script.py是你的主Python脚本文件名，需要替换成你实际的脚本名
          # 确保脚本文件名正确，且位于仓库的根目录下或工作流程文件中指定的路径下
